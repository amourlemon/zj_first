# NestJS 与 Prisma 项目总结

## 1. 项目概览

这是一个使用 NestJS 框架和 Prisma ORM 构建的 API 项目。主要功能包括用户认证（注册和登录）、用户管理和书签管理。

## 2. 技术栈

- NestJS：后端框架
- Prisma：ORM 和数据库工具
- PostgreSQL：数据库
- Docker：容器化数据库服务
- class-validator：DTO 验证
- class-transformer：对象转换

## 3. 项目结构

项目采用模块化结构，主要包含以下模块：

- Auth：处理用户认证
- User：用户管理
- Bookmark：书签管理
- Prisma：数据库连接和操作

## 4. NestJS 核心概念

### 4.1 模块（Modules）

每个功能都被组织成一个模块，如 `AuthModule`、`UserModule` 等。模块使用 `@Module()` 装饰器定义。

示例：
```typescript
@Module({
  imports: [PrismaModule],
  controllers: [AuthController],
  providers: [AuthService],
})
export class AuthModule {}
```

### 4.2 控制器（Controllers）

控制器处理 HTTP 请求和响应。例如，`AuthController` 处理注册和登录请求。

示例：
```typescript
@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  @Post('signup')
  signup(@Body() dto: AuthDto) {
    return this.authService.signup(dto);
  }

  @Post('signin')
  signin() {
    return this.authService.signin();
  }
}
```

### 4.3 服务（Services）

服务包含业务逻辑。如 `AuthService` 处理用户注册和登录的具体逻辑。

示例：
```typescript
@Injectable()
export class AuthService {
  constructor(private prisma: PrismaService) {}

  async signup(dto: AuthDto) {
    const { email, password } = dto;
    const hash = this.createHash(password);
    // ... 实现注册逻辑
  }

  // ... 其他方法
}
```

### 4.4 DTO（Data Transfer Objects）

DTO 用于定义请求体的结构和验证规则。例如，`AuthDto` 定义了注册和登录请求的数据结构。

示例：
```typescript
export class AuthDto {
  @IsEmail()
  @IsNotEmpty()
  email: string;

  @IsString()
  @IsNotEmpty()
  password: string;
}
```

## 5. Prisma 使用

Prisma 是一个现代的数据库工具集，它简化了数据库操作并提供了类型安全的查询能力。

### 5.1 Prisma 的主要组件

1. **Prisma Schema**: 用于定义数据模型的声明式语言文件。
2. **Prisma Client**: 自动生成的类型安全的查询构建器。
3. **Prisma Migrate**: 数据库迁移工具。
4. **Prisma Studio**: 可视化数据库管理工具。

### 5.2 Prisma Schema

`schema.prisma` 文件定义了数据库模型：

```prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  hash      String
  firstName String?
  lastName  String?
  bookmarks Bookmark[]
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  link        String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}
```

### 5.3 Prisma Client

Prisma Client 是一个自动生成的、类型安全的 ORM，用于数据库操作。在 `PrismaService` 中初始化：

```typescript
@Injectable()
export class PrismaService extends PrismaClient {
  constructor() {
    super({
      datasources: {
        db: {
          url: 'postgresql://postgres:123@localhost:5432/nest?schema=public',
        },
      },
    });
  }
}
```

使用 Prisma Client 进行查询示例：

```typescript
// 创建用户
const user = await this.prisma.user.create({
  data: {
    email,
    hash,
  },
});

// 查找用户
const user = await this.prisma.user.findUnique({
  where: {
    email: email,
  },
});
```

### 5.4 Prisma 常用命令

- `npx prisma init`: 初始化 Prisma 项目，创建 `prisma` 目录和 `schema.prisma` 文件。

- `npx prisma migrate dev`: 创建新的迁移并应用到数据库。这个命令会比较当前的 Prisma schema 和数据库的状态，生成必要的迁移文件，并立即应用这些变更。

- `npx prisma generate`: 生成 Prisma Client。每次修改 schema 后都需要运行这个命令来更新 Prisma Client。

- `npx prisma studio`: 启动 Prisma Studio 可视化数据库管理工具。这个工具提供了一个直观的界面来查看和编辑数据库中的数据。

- `npx prisma migrate deploy`: 在生产环境中应用待处理的迁移。这个命令不会生成新的迁移文件，只会应用已经存在但尚未应用的迁移。

- `npx prisma db push`: 直接将 Prisma schema 更改推送到数据库，而不创建迁移文件。适用于开发阶段快速迭代。

### 5.5 Prisma 的优势

1. **类型安全**: Prisma Client 提供了完全类型安全的数据库查询。
2. **自动完成**: IDE 可以提供智能的自动完成建议。
3. **数据验证**: Prisma 在数据库层面进行数据验证。
4. **简化的数据库操作**: 无需编写原始 SQL 查询。
5. **数据迁移**: 提供了强大的迁移工具，方便管理数据库架构的变更。

使用 Prisma 可以显著提高开发效率，减少数据库操作相关的错误，并提供更好的开发体验。

## 6. Docker 使用

### 6.1 Docker Compose 配置

`docker-compose.yml` 文件用于定义和运行多容器 Docker 应用程序：

```yaml
version: '3.8'
services:
  dev-db:
    image: postgres:13
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: nest
    networks:
      - freecodecamp
networks:
  freecodecamp:
```

配置说明：
- `image`: 指定使用的 Docker 镜像
- `ports`: 端口映射，格式为 "主机端口:容器端口"
- `environment`: 设置环境变量
- `networks`: 定义容器网络

### 6.2 Docker 常用命令

- `docker-compose up`: 启动所有服务
- `docker-compose up -d`: 在后台启动所有服务
- `docker-compose down`: 停止并删除所有容器
- `docker ps`: 列出正在运行的容器
- `docker logs <container_id>`: 查看容器日志

### 6.3 Docker 数据持久化

为了确保数据库数据在容器重启或删除后仍然保留，我们使用 Docker 卷进行持久化存储。更新后的 `docker-compose.yml` 文件如下：

```yaml
version: '3.8'
services:
  dev-db:
    image: postgres:13
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: nest
    networks:
      - freecodecamp
    volumes:
      - postgres-data:/var/lib/postgresql/data

networks:
  freecodecamp:

volumes:
  postgres-data:
```

这个配置中的 `volumes` 部分将创建一个名为 `postgres-data` 的 Docker 卷，并将其挂载到 PostgreSQL 容器的数据目录。这样可以确保：

1. 数据在容器重启之间保持不变。
2. 即使删除并重新创建容器，数据也不会丢失。
3. 可以更容易地备份和迁移数据。

使用卷进行数据持久化是 Docker 中管理状态数据的最佳实践之一，特别是对于数据库这样的有状态服务。

### 6.4 Docker Compose 命令比较

在使用 Docker Compose 时，有两种常见的命令格式：

1. `docker-compose up -d`
2. `docker compose up dev-db -d`

这两个命令有以下区别：

1. 命令格式：
   - `docker-compose up -d` 是较旧的命令格式。
   - `docker compose up dev-db -d` 是较新的命令格式，是 Docker Compose V2 的一部分。

2. 启动范围：
   - `docker-compose up -d` 会启 docker-compose.yml 文件中定义的所有服务。
   - `docker compose up dev-db -d` 只会启动名为 `dev-db` 的特定服务。

3. 行为：
   - `docker-compose up -d` 会在后台启动所有定义的服务。
   - `docker compose up dev-db -d` 只会在后台启动 `dev-db` 服务。

4. 使用场景：
   - 当你想启动整个应用的所有组件时，使用 `docker-compose up -d`。
   - 当你只想启动特定的服务（在这个例子中是数据库服务）时，使用 `docker compose up dev-db -d`。

5. 版本兼容性：
   - `docker-compose` 命令是旧版本的 Docker Compose 的一部分。
   - `docker compose` 命令是 Docker Compose V2 的一部分，它被集成到了 Docker CLI 中。

在本项目中，如果 `docker-compose.yml` 文件只定义了 `dev-db` 服务，那么这两个命令的效果是相同的。但如果将来在 `docker-compose.yml` 中添加了其他服务，使用 `docker compose up dev-db -d` 将只启动数据库服务，而 `docker-compose up -d` 将启动所有服务。

建议使用较新的 `docker compose` 命令格式，因为它是 Docker 的未来发展方向，并且与 Docker CLI 更好地集成。

### 6.5 执行 `docker compose up dev-db -d` 命令

当在终端输入 `docker compose up dev-db -d` 命令时，以下事情会依次发生：

1. **读取配置**：
   Docker Compose 会读取当前目录下的 `docker-compose.yml` 文件（如果存在）。

2. **创建网络**：
   如果指定的网络（在本例中是 `freecodecamp`）不存在，Docker 会创建它。

3. **拉取镜像**：
   如果本地没有指定的 PostgreSQL 镜像（`postgres:13`），Docker 会从 Docker Hub 拉取这个镜像。

4. **创建卷**：
   Docker 会创建名为 `postgres-data` 的卷，用于持久化存储数据库数据。

5. **创建并启动容器**：
   Docker 会基于配置创建一个新的容器：
   - 使用 `postgres:13` 镜像
   - 将容器的 5432 端口映射到主机的 5432 端口
   - 设置环境变量（POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB）
   - 将 `postgres-data` 卷挂载到容器的 `/var/lib/postgresql/data` 目录

6. **后台运行**：
   由于使用了 `-d` 参数，容器会在后台运行。

7. **输出容器 ID**：
   如果一切顺利，命令会输出新创建的容器的 ID。

8. **数据库初始化**：
   PostgreSQL 会在容器内部初始化数据库。如果是首次运行，它会创建必要的初始数据库文件。

9. **服务就绪**：
   一旦初始化完成，PostgreSQL 服务就可以接受连接了。

10. **日志记录**：
    容器会开始记录日志，可以通过 `docker logs <container_id>` 查看。

执行此命令后，您就有了一个运行中的 PostgreSQL 数据库服务，可以被您的 NestJS 应用程序使用。数据会被持久化存储在 Docker 卷中，即使容器被删除，数据也不会丢失。

注意：如果端口 5432 已经被使用，或者没有足够的权限创建网络或卷，命令可能会失败。确保没有其他服务占用了这个端口，并且您有足够的权限运行 Docker 命令。

## 7. 认证流程

### 7.1 注册（Signup）

1. 客户端发送包含 email 和 password 的 POST 请求到 `/auth/signup`。
2. `AuthController` 接收请求并调用 `AuthService.signup` 方法。
3. `AuthService` 创建密码哈希并尝试在数据库中创建新用户。
4. 如果邮箱已存在，抛出 `ForbiddenException`。

### 7.2 登录（Signin）

目前 `signin` 方法仅返回一个固定消息，后续需要实现完整的登录逻辑。

## 8. 数据验证

使用 `class-validator` 进行 DTO 验证。在 `main.ts` 中设置全局验证管道：

这个配置有以下作用：

1. **自动数据验证**：对所有传入的请求数据进行自动验证，确保数据符合我们定义的DTO规范。

2. **数据净化**：`whitelist: true` 选项确保只有DTO中定义的属性会被接受，自动剔除未定义的属性。这增强了应用的安全性，防止潜在的恶意数据注入。

3. **一致的数据处理**：在整个应用中统一了数据验证和转换的方式，提高了代码的一致性和可维护性。

```typescript
app.useGlobalPipes(new ValidationPipe({ whitelist: true }));
```

## 9. Prisma 模块

我们的应用使用了一个全局的 Prisma 模块，定义如下：

```typescript
@Global()
@Module({
  providers: [PrismaService],
  exports: [PrismaService],
})
```

这个模块的配置有以下几个关键点：

1. **全局模块**：
   - `@Global()` 装饰器将 PrismaModule 标记为全局模块。
   - 这意味着 PrismaService 可以在应用的任何地方使用，无需在每个模块中重复导入。

2. **模块定义**：
   - `@Module()` 装饰器是 NestJS 的标准模块装饰器，用于定义模块结构。

3. **服务提供**：
   - `providers: [PrismaService]` 表明 PrismaService 是这个模块的提供者。
   - NestJS 将负责创建和管理 PrismaService 的实例。

4. **服务导出**：
   - `exports: [PrismaService]` 使得 PrismaService 可以被其他模块使用。
   - 结合全局模块的特性，PrismaService 可以在整个应用中被注入和使用。

这种配置的主要优势包括：

- **简化代码结构**：无需在每个需要数据库访问的模块中重复导入 PrismaService。
- **提高可维护性**：确保整个应用使用相同的 Prisma 实例。
- **方便的数据库访问**：在任何需要的地方轻松注入和使用 PrismaService。

通过这种方式，我们可以在整个应用中方便地使用 Prisma ORM 进行数据库操作，同时保持代码的清晰和一致性。

## 10. Prisma 服务

我们的应用使用了自定义的 Prisma 服务来管理数据库连接和操作。这个服务定义如下：

```typescript
@Injectable()
export class PrismaService extends PrismaClient {
  constructor() {
    super({
      datasources: {
        db: {
          url: 'postgresql://postgres:123@localhost:5432/nest?schema=public',
        },
      },
    });
  }
}
```

这个服务的主要特点和作用如下：

1. **可注入服务**：
   - `@Injectable()` 装饰器使得 `PrismaService` 可以被 NestJS 的依赖注入系统管理。

2. **继承 PrismaClient**：
   - `PrismaService` 继承自 Prisma 的 `PrismaClient`，获得了所有 Prisma ORM 的功能。

3. **数据库连接配置**：
   - 在构造函数中配置了数据库连接信息。
   - 连接 URL 指定了 PostgreSQL 数据库的详细信息，包括主机、端口、用户名、密码和数据库名。

4. **连接 URL 解析**：
   - `postgresql://`: 数据库类型（PostgreSQL）
   - `postgres:123`: 用户名和密码
   - `@localhost:5432`: 数据库主机和端口
   - `/nest`: 数据库名称
   - `?schema=public`: 使用的 schema

**注意**：在实际生产环境中，不应该直接在代码中硬编码数据库连接信息，特别是密码。建议使用环境变量或配置文件来管理这些敏感信息。

这个服务的主要作用是为整个 NestJS 应用提供一个统一的 Prisma 客户端实例。通过这个服务，应用的任何部分都可以方便地进行数据库操作，使用 Prisma 生成的所有数据库查询方法。

通过将 `PrismaService` 设置为全局服务（在 PrismaModule 中），我们可以在整个应用中轻松地注入和使用它，从而简化数据库操作的实现。

### 10.1 继承 PrismaClient 的数据库操作方法

通过继承 `PrismaClient`，`PrismaService` 获得了 Prisma 提供的所有数据库操作方法，包括但不限于以下 CRUD 操作：

1. **创建（Create）**:
   ```typescript
   this.prisma.user.create({
     data: {
       email: 'user@example.com',
       name: 'John Doe',
     },
   });
   ```

2. **读取（Read）**:
   ```typescript
   // 查找单个用户
   this.prisma.user.findUnique({
     where: { id: 1 },
   });

   // 查找多个用户
   this.prisma.user.findMany({
     where: { age: { gte: 18 } },
   });
   ```

3. **更新（Update）**:
   ```typescript
   this.prisma.user.update({
     where: { id: 1 },
     data: { name: 'Jane Doe' },
   });
   ```

4. **删除（Delete）**:
   ```typescript
   this.prisma.user.delete({
     where: { id: 1 },
   });
   ```

除了基本的 CRUD 操作，PrismaClient 还提供了许多高级查询功能：

5. **关系查询**:
   ```typescript
   this.prisma.user.findUnique({
     where: { id: 1 },
     include: { posts: true },
   });
   ```

6. **聚合查询**:
   ```typescript
   this.prisma.user.aggregate({
     _avg: { age: true },
     where: { country: 'USA' },
   });
   ```

7. **事务**:
   ```typescript
   this.prisma.$transaction([
     this.prisma.user.create({ data: { name: 'Alice' } }),
     this.prisma.post.create({ data: { title: 'Hello World' } }),
   ]);
   ```

8. **原始数据库查询**:
   ```typescript
   this.prisma.$queryRaw`SELECT * FROM User WHERE id = ${userId}`;
   ```

### 10.2 在服务中使用 PrismaService

在实际使用中，您可以在服务层注入 `PrismaService`，然后使用这些方法进行数据库操作，例如：

```typescript
@Injectable()
export class UserService {
  constructor(private prisma: PrismaService) {}

  async createUser(data: CreateUserDto) {
    return this.prisma.user.create({ data });
  }

  async findUserById(id: number) {
    return this.prisma.user.findUnique({ where: { id } });
  }

  // ... 其他方法
}
```

通过这种方式，我们可以在整个应用中方便地进行数据库操作，同时充分利用 Prisma 的强大功能，如类型安全、自动补全等。这大大简化了数据库操作，提高了开发效率，并减少了潜在的错误。

## 11. 环境配置

使用 `.env` 文件管理环境变量，如数据库连接 URL：

```
DATABASE_URL="postgresql://postgres:123@localhost:5432/nest?schema=public"
```

## 12. 代码风格

使用 Prettier 和 EditorConfig 保持一致的代码风格。

`.prettierrc` 配置示例：
```json
{
  "singleQuote": true,
  "trailingComma": "all",
  "printWidth": 60
}
```

`.editorconfig` 配置示例：
```ini
root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true

[*.{js,ts,jsx,tsx,json,yml,yaml}]
indent_style = space
indent_size = 2
```

## 13. 待改进点

1. 实现完整的登录逻辑。
2. 添加用户认证中间件。
3. 实现书签 CRUD 操作。
4. 添加单元测试和集成测试。
5. 实现密码加密（目前使用简单的盐值拼接）。
6. 添加错误处理中间件。
7. 实现日志系统。

## 14. NestJS 常见命令

NestJS CLI 提供了许多有用的命令，可以帮助开发者快速创建和管理项目。以下是一些常用的 NestJS 命令：

1. **创建新项目**:
   ```
   nest new project-name
   ```
   这个命令会创建一个新的 NestJS 项目。

2. **生成新模块**:
   ```
   nest generate module module-name
   ```
   或简写为：
   ```
   nest g mo module-name
   ```
   这会创建一个新的模块，包括模块文件和相应的目录结构。

3. **生成控制器**:
   ```
   nest generate controller controller-name
   ```
   或简写为：
   ```
   nest g co controller-name
   ```
   这会创建一个新的控制器文件。

4. **生成服务**:
   ```
   nest generate service service-name
   ```
   或简写为：
   ```
   nest g s service-name
   ```
   这会创建一个新的服务文件。

5. **生成资源**:
   ```
   nest generate resource resource-name
   ```
   或简写为：
   ```
   nest g res resource-name
   ```
   这个命令会生成一个完整的 CRUD 资源，包括模块、控制器、服务和 DTO。

6. **启动开发服务器**:
   ```
   nest start
   ```
   启动应用程序。

7. **以监视模式启动开发服务器**:
   ```
   nest start --watch
   ```
   启动应用程序并监视文件变化，自动重启服务。

8. **构建应用**:
   ```
   nest build
   ```
   编译应用程序。

9. **运行测试**:
   ```
   nest test
   ```
   运行单元测试。

10. **运行端到端测试**:
    ```
    nest test:e2e
    ```
    运行端到端测试。

这些命令可以大大提高开发效率，帮助您快速搭建和管理 NestJS 项目结构。在使用这些命令时，请确保您在项目根目录下运行它们。

注意：某些命令（如 `nest new`）需要全局安装 NestJS CLI。您可以通过以下命令全局安装：

```
npm install -g @nestjs/cli
```

使用这些命令可以帮助您更快地开发 NestJS 应用，并保持项目结构的一致性。

## 结论

这个项目展示了如何使用 NestJS 和 Prisma 构建一个基本的 API 服务。通过模块化设计和依赖注入，项目结构清晰，易于扩展。使用 Prisma 简化了数据库操作，提高了开发效率。Docker 的使用使得开发环境更加一致和可复制。后续可以在此基础上添加更多功能，如用户角色管理、高级查询等，同时加强安全性和性能优化。
